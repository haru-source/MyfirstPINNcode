# -*- coding: utf-8 -*-
import torch
import torch.nn as nn
import matplotlib.pyplot as plt

# ニューラルネットワークの定義
class SimplePINN(nn.Module):
    def __init__(self):
        super().__init__()
        self.net = nn.Sequential(
            nn.Linear(1, 20),
            nn.Tanh(),
            nn.Linear(20, 20),
            nn.Tanh(),
            nn.Linear(20, 1)
        )

    def forward(self, t):
        return self.net(t)

# 物理損失：f = m a（今回は f=1, m=1）
def physics_loss(model, t, m=1.0, f=1.0):
    t.requires_grad_(True)
    x = model(t)
    dx = torch.autograd.grad(x, t, torch.ones_like(x), create_graph=True)[0]
    d2x = torch.autograd.grad(dx, t, torch.ones_like(dx), create_graph=True)[0]
    residual = f - m * d2x
    return torch.mean(residual**2)

# モデル・最適化
model = SimplePINN()
optimizer = torch.optim.Adam(model.parameters(), lr=0.01)

# 時間データ
t_train = torch.linspace(0, 2, 100).view(-1, 1)
loss_history = []

# 学習
for epoch in range(1000):
    loss = physics_loss(model, t_train)
    optimizer.zero_grad()
    loss.backward()
    optimizer.step()
    loss_history.append(loss.item())
    if epoch % 100 == 0:
        print(f"Epoch {epoch}: Loss = {loss.item():.6f}")

# 損失のグラフ表示
plt.plot(loss_history)
plt.xlabel("Epoch")
plt.ylabel("Loss")
plt.title("Loss History of Simple PINN")
plt.grid(True)
plt.show()
